
-PRG 패턴 : 게시글을 등록하거나, 결제를 할 때, post 방식으로 요청을 보냅니다.
만약에, 요청을 보낸 뒤에, 새로고침을 하거나 뒤로가기를 누르면, 동일한 요청이 중복해서 발생하여, 
결과가 여러번 실행되는 문제가 생길 수도 있습니다.
prg패턴은 이런 문제를 회피하기 위해, post 방식으로 온 요청을 get 방식의 웹페이지로 redirect 시키는 방식입니다. 

-엔티티 : 개체, 테이블. 개념, 사건 장소 등의 명사
-속성 : 칼럼. 업무에서 필요로하는 인스턴스. 분리되지 않는 최소의 데이터 단위
-인스턴스 : 엔티티의 행. DB에 저장된 데이터 내용의 전체 집합.
-기능명세서/요구사항분석 : 프로젝트의 주제를 정한 뒤, 해당 프로젝트에서 필요로하는 기능을 정리
-유스케이스 다이어그램 : 사용자의 입장에서, 사용자와 시스템의 기능/상호작용을 표현한 다이어그램
-E-R 다이어그램 : 개체/엔티티 간의 관계를 표현하는 데이터 모델링 방식.
-클래스 다이어그램 : 클래스의 구성요소 및 클래스 간의 관계를 도식화한 구조 다이어그램

-프레임워크 : 특정한 종류의 소프트웨어를 개발할 때, 필요한 기능을 효율적으로 구현하기 위해 라이브러리를 모아놓은 것. 뼈대 역할. 스프링, 장고 등... 웹 프레임워크: 웹서버를 구현하기 위한 목적
-서블릿 : 자바 기반의 웹 서버 애플리케이션 기술. 웹 페이지를 동적으로 생성하는 웹 컴포넌트. mvc 패턴의 controller
-rest : http 프로토콜을 활용한 소프트웨어 아키텍쳐의 한 형식으로 네트워크 상에서 클라이언트와 서버 사이의 통신 방식. uri를 통해 자원을 명시하고, http method(post, get, put, delete)로 해당 자원의 crud 작업을 처리. 간결하고, 범용성이 있음
-rest api : rest 기반으로 서비스 api를 구현한 것. api : 서로 다른 프로그램 사이에서 상호작용 하기 위한 인터페이스 사양.
-restful : rest원리를 따르는 시스템.

-MVC 패턴 : model-view-controller. 소프트웨어 디자인 패턴. model은 데이터, DB를, view는 사용자가 보는 화면, UI를, controller는 view와 model 사이에서 상호 동작을 관리하고, 통제하는 방식으로 동작합니다. MVC1(controller, view를 jsp가 담당), 2 패턴(controller와 view 분리.)이 존재하며, spirng framework는 mvc2 패턴을 차용합니다.

-get 방식 : HTTP 패킷의 헤더에 데이터를 키/값 형태로 실어 보냄. url 형태. 빠르지만 용량 제한
-post 방식 : 헤더필드의 body에 데이터를 설명하는 content-type이라는 헤더필드가 들어감.

-다형성 : 오버로딩/오버라이딩
-오버로딩 : 같은 이름의 메서드나 생성자를 매개변수의 갯수나 유형, 순서를 다르게하여 다양한 유형의 호출에 응답할 수 있도록 하는 것.
-오버라이딩 : 상위 클래스가 가지고 있는 메서드를 하위 클래스에서 재정의하여 사용 

-추상화 : 객체들의 공통성과 본질을 모아 추출
-상속 : 기존의 클래스를 재활용하여 새로운 클래스를 작성
-다형성 : 어떤 객체의 속성이나 기능이 상황에 따라 여러가지 형태를 가질 수 있는 성질
-캡슐화 : 서로 연관있는 속성과 기능들을 하나의 캡슐로 만들어, 데이터를 외부로부터 보호

-solid 원칙 : 객체 지향 설계 원칙
-srp : 단일 책임 원칙 : 한 클래스는 하나의 책임만 가져야 한다
-ocp : 개방-폐쇄 원칙 : 소프트웨어 요소는 확장에는 열려있으나, 변경에는 닫혀있어야 한다
-lsp : 리스코프 치환 원칙 : 프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다/ 하위 클래스는 언제나 상위 클래스를 대체할 수 있다.
-isp : 인터페이스 분리 원칙 : 한 클래스는 자기가 사용하지 않는 인터페이스는 구현하지 말아야 하낟.
-dip : 의존 역전 원칙 : 구체적인 클래스보다 인터페이스나 추상 클래스와 관계를 맺어야 한다

-command 패턴 : 하나의 객체를 통해 여러 객체들에 명령을 해야할 때 사용. 요청을 캡슐화하여 커맨드 객체가 명령을 해야하는 객체들에 대한 의존성을 느슨하게 만들 수 있음. command interface만 정의하고, 하위 클래스에서 command 객체를 구현하는 방식. command 객체의 메서드만으로 모든 객체의 제어가 가능.

-join : 두 개 이상의 테이블을 서로 연결하여 검색할 때 사용하는 방법
-mybatis : 자바 오브젝트와 sql 사이에 자동 매핑 기능을 지원하는 프레임워크. sql을 별도의 파일로 분리해서 관리함. 동적 쿼리 사용이 용이.

-정규화 : 테이블을 무손실 분해하는 과정. 중복 제거. 삽입, 이상, 삭제 이상 방지. 1~5정규화.
-반정규화 : DB의 성능 향상을 위해, 테이블의 중복, 통합, 분리을 허용하는 방식. 테이블 병합/테이블 분할/테이블 추가