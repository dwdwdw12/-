1.Lombok 관련 어노테이션

@Getter @Setter 
@EqualsAndHashCode	-두 객체의 내부의 값이 같은지 숫자로 확인하는 값은 hashcode()이다
			-같은 객체인지 확인하는 메소드는 equals()이다.
@ToString		-출력시 주소값 대신, 객체가 가진 값을 문자열로 표현

@NoArgsConstructor	-파라미터가 없는 기본 생성자를 생성
@AllArgsConstructor	-모든 필드 값을 파라미터로 받는 생성자를 생성
@RequiredArgsConstructor	-final이나 @NonNull인 필드 값만 파라미터로 받는 생성자를 생성

2. 빈 등록 관련
@Controller	-사용자의 요청을 처리 한 후 지정된 뷰에 모델 객체를 넘겨주는 역할
@Service		-비즈니스 로직을 수행(정보 가공)하고 데이터베이스에 접근하는 DAO를 이용(sql 처리)해서 결과값을 받아 옴
@Repository	-Entity에 의해 생성된 DB에 접근하는 메서드 들을 사용하기 위한 인터페이스. 필요한 경우에 메서드를 정의.
		-상위 Repository 상속받기(JpaRepository 또는 CrudRepository)
@Configuration	-빈을 수동으로 등록. 보통 클래스 위에 표기, 메서드에 @Bean 사용.
		-빈 등록시 싱글톤이 되도록 보장. 스프링 컨테이너에서 빈을 관리할 수 있게 됨
		-스프링 컨테이너: 자바 객체의 생명 주기를 관리하며, 생성된 자바 객체들에게 추가적인 기능을 제공 
				스프링에서는 자바 객체를 빈(Bean)이라 한다.
@Bean		-@Configuration 안에 사용. 수동으로 빈을 등록해야 할 때.
			-개발자가 직접 제어가 불가능한 라이브러리를 활용할 때
			-애플리케이션 전범위적으로 사용되는 클래스를 등록할 때
			-다형성을 활용하여 여러 구현체를 등록해주어야 할 때

2-1) @Controller
@Controller	-View를 반환하기 위해 사용(jsp/html 등)
@RestController	-Json 형태로 객체 데이터를 반환
@Controller  +	@ResponseBody		-자바 객체를 HTML/XML의 body 내용에 매핑
		@RequestBody		-HTML/XML의 body 내용을 자바 객체로 매핑	(데이터 형식은 주로 JSON 사용)
			+ResponseEntity로 반환
@PathVariable	-url값에 가변형 변수를 전달해서 처리. @GetMapping(path="/users/{userId}") << 이런 방식을 활용하고 싶을 때
@Valid		-객체의 제약 조건을 검증하도록 지시. @RequestBody/@RequestParam과 같이 사용. 제약조건은 DTO에 명시하기.
@GetMapping	-HTTP GET 요청을 특정 핸들러 메소드에 맵핑(주소에 파라미터가 노출 됨)	조회(select, read)
@PostMapping	-POST 요청을 매핑(주소창에 파라미터가 노출되지 않음). 			생성(create)
@PatchMapping	-일부만 업데이트 할 경우						수정(update)
@DeleteMapping	-삭제할 경우							삭제(delete)

2-2)@Service	-위와 동일
2-3)@Repository	-위와 동일

3.엔티티 관련 어노테이션
3-1) 엔티티 매핑
@Entity		-클래스를 엔티티로 선언
@Table		-엔티티와 매핑할 테이블 지정. DB에서 사용할 이름 지정 가능(name="...")
@Id		-테이블의 기본키에 사용할 속성
@Column	-필드와 칼럼 매핑. DB에서 사용할 이름 지정 가능(name="...")
	-insertable/updatable = true/false : insert/update 시점에 칼럼에 대한 삽입/수정을 막음.  
	-읽기 전용에서 사용?
@Enumerated	-enum 타입 매핑. (EnumType.STRING)과 같이 타입 지정 가능
@GeneratedValue	-키 값 생성 전략
		-(strategy = GenerationType.SEQUENCE, generator = "..._seq"). 오라클의 경우 sequence를 사용하여 넘버링.
				@SequenceGenerator를 추가적으로 사용하여 sequence에 대한 정보를 상세하게 지정할 수 있음
		-그 외, GenerationType.AUTO/IDENTITY/TABLE이 있음

3-2) 제약조건
@NotNull(message = "..")		-not null 조건
@Min(value = 1, message = "...")	-최솟값 설정
@Max				-최댓값 설정
@Size				-크기 지정
@Length				-@Size와 동일. Hibernate에서 @Size에 대응시킨 어노테이션
@NotNull			-null 비허용, "" 허용  , " " 허용
@NotEmpty			-null 비허용, "" 비허용, " " 허용
@NotBlank			-null 비허용, "" 비허용, " " 비허용
@Email				-email 형식


3-3) 연관관계 매핑(Join)
@OneToOne	-일대일
@OneToMany	-일대다
@ManyToOne	-다대일
@ManyToMany	-다대다
	-cascade(영속성 전이) : CascadeType.ALL : 부모 엔티티의 영속성 상태 변화를 자식 엔티티에 모두 전이. 그 외, persist, merge, remove, refresh, detach 등이 있음
	-orphanRemoval=true : 고아 객체 제거. 부모 엔티티가 삭제되거나, 자식 엔티티와의 관계를 제거할 경우, 자식엔티티가 삭제.(CascadeType.REMOVE는 첫번째 경우만 삭제)
	-FetchType.LAZY/EAGER : JPA 가 하나의 Entity 를 조회할 때, 연관관계에 있는 객체들을 어떻게 가져올 것이냐를 나타내는 설정값
		-연관 관계에 있는 Entity 들 모두 가져온다 -> Eager 전략
		-연관 관계에 있는 Entity 가져오지 않고, getter 로 접근할 때 가져온다 -> Lazy 전략
@JoinColumn	-@OneToOne 등과 함께 쓰일 경우, 매핑되는 칼럼을 외래키로 불러옴
		-조인 대상을 결정

@MappedSuperclass	-객체의 입장에서 공통 매핑 정보가 필요할 때 사용
			-단순히 부모 클래스를 상속 받는 자식 클래스에 매핑 정보만 제공. 상속관계가 아님.
			-추상클래스에 사용하는 것이 좋음.
			-주로 등록일, 수정일, 등록한 사람, 수정한 사람 같은 전체 엔티티에서 공통으로 적용하는 정보를 모을 때 사용

4.Auditing 관련(BaseEntity 활용)
@EntityListeners(value = {AuditingEntityListener.class})	-Entity Listener는 엔티티의 변화를 감지하고 데이블의 데이터를 조작하는 역할
						-엔티티를 DB에 적용하기 이전, 이후에 콜백 리스너를 요청함	
						-AuditingEntityListener.class는 jpa에서 제공하는 리스너.
@EnableJpaAuditing	-Configuration 어노테이션을 통해 JPA 에서 auditing 을 가능하게 하는 어노테이션
@CreatedDate 		-인스턴스가 생성되는 것을 감지하여 감지된 일자를 저장
@LastModifiedDate	-인스턴스가 수정되는 것을 감지하여 감지된 일자를 저장
@CreatedBy		-생성한 사람/유저를 저장
@LastModifiedBy		-수정한 사람/유저를 저장

5. 테스트 관련
@SpringBootTest		-단위 테스트(JUnit) 또는 통합 테스트 제공.
@TestPropertySource(locations = "classpath:application-test.properties")	
			-프로젝트에서 사용되는 다른 소스보다 우선 순위가 높은 구성 소스를 정의할 수 있음.
			-위의 location 예제는 application.properties 대신 application-test.properties를 사용하겠다는 것.
			-두 property 중, 중복되는 부분은 application-test.properties부터 적용. 나머지는 application.properties를 따름
@Transactional		-하나의 작업 or 여러 작업을 하나의 작업 단위로 묶어 Commit or Rollback 처리가 필요할 때 사용
	@Rollback(value = false)	-@Transactional은 연산이 끝난 후 Rollback 데이터를 rollback시킴. 이것을 취소하고 싶을 때.
@BeforeTestMethod/@BeforeTestClass	-전처리에 사용
@Test			-Junit 테스트 지정
@DisplayName("테스트 이름")	-테스트 이름 지정. 콘솔창에 표시됨.
@WebMvcTest 		-웹 애플리케이션에서 컨트롤러를 테스트 할 때, 서블릿 컨테이너를 모킹하기 위해 사용
			-모킹(mocking) : 테스트를 위해 실제 객체와 비슷한 객체를 만드는 것 
			-컨트롤러를 테스트하는 데 적합
@AutoConfigureMockMvc	-@WebMvcTest과 비슷한 역할. 더 세밀한 작업을 할 때 사용.
			-컨트롤러 뿐만 아니라  @Service나 @Repository가 붙은 객체도 메모리에 올림
@WithMockUser(username = "admin", roles = "ADMIN")

5. 기타
@Autowired		-스프링 빈을 주입
@PersistenceContext	-영속성 컨텍스트를 주입하는 표준 어노테이션
@Query			-실행할 메서드 위에 정적 쿼리를 작성
@Param			-SQL 문장에 다수의 파라미터를 전달할 때. 전달되는 변수들에 꼭 @Param을 붙임.
@EnableWebSecurity	-스프링 시큐리티 활성화
@Override		-재정의
@Value("${uploadPath}")	-프로퍼티 파일(properties)나 야믈 파일(yaml, yml)의 설정정보/메타정보를 읽어올 때(데이터베이스 연결 정보나 외부 API 주소 등).
			-설정값을 분리할 경우)	a.환경에 따라 유연하게 값을 설정할 수 있음
						b.초기값을 설정할 수 있음
						c.불필요한 컴파일을 줄일 수 있음
@SpringBootApplication	-스프링부트 실행시, 기본적인 설정을 선언. 내부에, 설정에 필요한 다양한 어노테이션들이 들어있음.
@QueryProjection		-Querydsl을 DTO로 조회할 때 사용.
			-DTO의 생성자에 @QueryProjection를 붙일 경우, DTO에 해당하는 QType이 생성됨.
			-new QDTO로 결과에 매핑시키는 형태.
			-런타임 에러뿐만 아니라 컴파일 시점에서도 에러를 잡아주고, 파라미터로도 확인할 수 있다는 장점이 있음.
@Component	-등록된 빈 객체를 가져옴
@Log			-로거를 생성.  자동으로 log 필드를 만들고, 해당 클래스의 이름으로 로거 객체를 생성하여 할당
			-Logging : 오류 발생시 오류에 대한 기록을 남김.
			-Log4j의 경우, DEBUG < INFO < WARN < ERROR <  FATAL 등의 로그레벨이 있고, 
			 레벨은 사용하는 로그 유틸리티마다 다를 수 있음
@Generated("com.querydsl.codegen.DefaultEntitySerializer")	
			-사람이 만든 소스가 아닌, 다른 소스 자동 생성기가 생성한 코드를 지칭할 때 사용하는 어노테이션
			-Q클래스(QuaryDSL)에서 사용.






