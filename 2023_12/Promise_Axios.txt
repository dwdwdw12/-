Promise, Axios - async, await 전송방식

https://inpa.tistory.com/entry/JS-%F0%9F%93%9A-%EB%B9%84%EB%8F%99%EA%B8%B0%EC%B2%98%EB%A6%AC-Promise

* 콜백 지옥 : 여러개의 비동기 작업을 순차적으로 수행해야 할 경우, 콜백 함수가 중첩되어, 가독성이 떨어지고, 코드의 흐름을 파악하기 어려우며, 에러 처리 및 에러 발생 위치를 추적하기 어려운 문제
   
* Promise 객체 : 비동기 작업의 결과(성공(resolve), 실패(reject))를 나타내는 독자적인 JS 객체
	         콜백함수를 대체할 수 있고, 비동기 작업의 흐름을 쉽게 제어할 수 있음
   -객체 처리 : Promise 객체는 비동기 작업이 완료된 이후, 다음 작업을 연결시켜 진행.
	- .then() : 성공 시에 실행
	- .catch() : 실패 시에 실행
	- .finally() : 결과에 상관없이 실행
   -Promise 객체를 함수(프로미스 팩토리 함수)로 만들어 사용할 수 있음
   -Promise 객체의 3가지 상태
	- Pending(대기) : 처리가 완료되지 않은 상태(처리 진행중)
	- Fulfilled(이행) : 성공적으로 처리 완료 (pending->resolve(value) , .then())
	- Rejected(거부) : 처리 실패 (pending->reject(error) , .catch())
   -Promise 정적 메서드
	-Promise.resolve() : 프로미스 객체와 관련없는 함수 내에서, 필요에 따라 프로미스 객체를 반환해 핸들러를 이용
	-Promise.reject() : 거부하는 프로미스 객체 반환
	-Promise.all() : 여러개의 프로미스 요소를 한번에 처리할 때, 모든 프로미스가 완료될 때, then 핸들러가 실행됨. 
	-Promise.allSettled() : Promise.all()의 모든 프로미스 각각의 상태 및 값을 모아놓은 배열 반환
	-Promise.any() : 여러개의 프로미스 요소를 한번에 처리할 때, 프로미스가 하나라도 완료(이행)되면 반환
	-Promise.race() : 여러 프로미스 중 가장 먼저 처리된 프로미스 결과값 반환. 성공/실패 여부 상관x

https://velog.io/@ch9eri/axios-async-await

* async, await
   -JS의 비동기 처리 패턴
   -Promise 사용 가능

1. async
   -async 키워드는 함수의 앞에 붙여서 사용
   -항상 Promise를 반환
   -반환값이 Promise가 아니라면 이행상태의 Promise(Resolved Promise) 형태로 값을 감싸 반환

2. await
   -async 함수 안에서만 사용 가능
   -함수 안에서 await를 만나게 되면 Promise가 처리될 때까지 대기
   -await 이용시, 콜백함수 처리 없이 비동기 처리 가능