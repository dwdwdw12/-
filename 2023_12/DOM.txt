DOM(Document Object Model, 문서 객체 모델)

https://velog.io/@sj_dev_js/HTML-DOM%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C

1. 브라우저의 렌더링 과정
   a) 파싱 : 문자열을 토큰으로 분해, 토큰에 의미를 반영, parse tree 생성
   b) 렌더링 : HTML, CSS, JS로 작성된 문서를 파싱해, 브라우저에 시각적으로 출력
	HTML->파싱->DOM tree, CSS-->CSSOM tree, JS --> AST
   c) 브라우저의 렌더링 엔진은 문서를 파싱해, 브라우저가 이해할 수 있는 tree 구조로 만듦.

2. DOM API
   -JS는 DOM에 직접 관여 가능(createElement, appendChild)
   -JS로 DOM의 노드 탐색 가능(querySelector, getElementById)
	->DOM이 DOM API(DOM 탐색 및 조작 가능)를 제공하므로.
   -JS가 DOM 변경하면, 다시 렌더트리 형성, 브라우저에 렌더링


3. DOM 이벤트
   a) 캡쳐링 단계 : 이벤트가 상위요소에서 하위요소로 전파
   b) 타깃 단계 : 이벤트가 실제 타깃 요소에 전달
   c) 버블링 단계 : 이벤트가 하위요소에서 상위요소로 전파
	->이벤트 발생(ex-<td>클릭)시, a-b-c 단계를 거침.

4. e.preventDefault() VS e.stopPropagation()
   a) e.preventDefault() : 현재 이벤트의 기본 동작 중단
   b) e.stopPropagation() : 이벤트가 상위 DOM으로 전파되지 않게 막음(버블링 중단)

* 참고) addEventListener("동작(click)", 함수, true/false)
	true -> 캡쳐링 상태
	false -> 버블링 상태
		->캡쳐링 or 버블링 상태에서, 동작 발생시, 함수의 내용대로 처리