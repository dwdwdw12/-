Controller 동작

1. WEB-INF>spring>appServlet>servlet-context에 controller 패키지가 등록되어 있는지 확인하기

2. @Controller로 등록. 또는 @RestController(controller+responsebody) 사용

3. @RequestMapping으로 기본 접속 주소 설정 가능

4. @Log4j로 로그정보 출력 가능

5. controller는 리턴 타입을 가질 수도 있으며, 리턴 타입별로 다른 방식으로 동작
	void : url을 경로로 삼아, jsp 파일을 탐색	
	String : WEB-INF - views 아래에서 지정한 jsp 파일을 탐색
	VO, DTO 타입 : JSON 데이터 전달
	etc...
	
6. @RequestMapping에서 응답방식별로 다른 동작을 지정할 수 있음
	@RequestMapping(value = "/basic", method = RequestMethod.GET)
	public void basic() {
		log.info("basic_get...");
	}
   6.5. 또는 @GetMapping, @PostMapping, @DeleteMapping 사용 가능. 

7. -매개변수를 VO, DTO 방식으로 지정하면, 데이터를 전달받을 때(get 방식 등), 타입이 일치하면 자동으로 매핑. 불일치하면 초기값으로 내버려둠. jsp파일로 자동으로 전달하기도 함.
   -Model을 사용하여 jsp로 값을 넘겨줄 수도 있음(addAttribute)
	public String ex01(SampleDTO dto, Model model) {
		model.addAttribute("dto", dto);
		return "ex01";
	}

7.5. 매개변수가 기본 자료형일 경우, 전달되지 않음. model을 사용해 전달하기

8. 7번과 관련하여, 키 값이 다를 경우, 아래의 방식으로 해결가능
	@GetMapping("/ex02")
	public String ex02(@RequestParam("name") String name, @RequestParam("age") int age) {...}

9. 아래와 같은 방식으로 키 값 없이 직접 입력받을 수도 있음 
	@GetMapping("/ex06/{name}/{age}")
	public String ex06(@PathVariable("name") String name, @PathVariable("age") int age) {...}
    이 경우, 해당 값을 바로 가져가서 sql 작업에 활용가능
    @PathVariable로 지정해주어야 함

10. 반환타입이 VO/DTO일 경우, JSON 타입으로 데이터를 주고받을 목적.
	-데이터를 넘겨줄 때 @ResponseBody 필요(*@RestController=@Controller+@ResponseBody)
		-메서드 내부에서 dto를 생성해 return으로 반환
		-jsp 화면상에 {"name" : "홍길동", "age" : 22}와 같은 식으로, json 데이터가 출력
	-데이터를 넘겨받을 때 @RequestBody 필요(매개변수에 dto와 함께 사용). 
		-반환타입은 마음대로.

11. ResponseEntity<String> : 결과값 + 상태 코드값을 확인하기 위해서 사용.
	String msg = "{\"name\" : \"홍길동\"}";	//{ "name": "홍길동"}
	HttpHeaders header = new HttpHeaders();
	header.add("Content-Type", "application/json;charset=utf-8");
	return new ResponseEntity<String>(msg, header, HttpStatus.OK);	
		
	//메세지와 상태 코드 값 = 200(f12>네트워크>상태 참고) 반환.
	//코드 값은 HttpStatus의 조건(OK, ACCEPTED, ...)에 따라 달라짐

12. 파일 업로드
     a. pom.xml에 commons-fileupload 추가
     b. servlet-context.xml에 다음 내용 추가
    <beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	<beans:property name="defaultEncoding" value="utf-8"></beans:property>
	<!-- 1024*1024*10 bytes 10MB -->
	<beans:property name="maxUploadSize" value="104857560"></beans:property>
	<!-- 1024*1024*2 bytes 2MB -->
	<beans:property name="maxUploadSizePerFile" value="2097152"></beans:property>
	<beans:property name="uploadTempDir" value="file:/C:/upload/tmp"></beans:property>
	<beans:property name="maxInMemorySize" value="10485756"></beans:property>
    </beans:bean>
      c. 업로드 시, method="post", enctype="multipart/form-data" 확인하기
      d. file.getOriginalFilename(), getSize() 등의 메서드로 파일의 정보를 확인할 수 있음.

13. 예외처리(AOP 활용)
      a. servlet-context.xml에 등록
	<context:component-scan base-package="org.zerock.exception" />
      b. web.xml에 다음 내용 추가(처리하고 싶은 예외)
	<!-- Processes application requests -->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet
		</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml
			</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
		
		<!-- 예외처리 추가 -->
		<init-param>
			<param-name>throwExceptionIfNoHandlerFound</param-name>
			<param-value>true</param-value>
		</init-param>
		<!-- 예외처리 추가 완료 -->
		
	</servlet>
      c. 별도의 클래스 파일을 생성. @ControllerAdvice 로 빈 등록
      d. 메서드 앞에 @ExceptionHandler(NoHandlerFoundException.class) 와 
		@ResponseStatus(HttpStatus.NOT_FOUND) 를 사용하여 원하는 예외를 선택할 수 있음.
	-모든 예외를 포함하고 싶다면 @ExceptionHandler 사용.
	-예외 발생시, 다른 페이지로 넘겨줄 수 있음.