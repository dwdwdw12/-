AOP Test
1. resources>applicationContext.xml 에서 context:component에 service 패키지 등록.

2. Spring 컨테이너를 구동한다.
   AbstractApplicationContext container = new GenericXmlApplicationContext("applicationContext.xml");

3. Spring 컨테이너로부터 BoardServiceImpl 객체를 탐색
   BoardService boardService = (BoardService) container.getBean("boardService");	
	//형변환 필요(Object 타입->BoardService)

4. 테스트 이후 컨테이너 종료
   container.close();

-------------------------------------------------------------------
*로그 확인
1. 별도의 클래스 생성.
2. serviceImpl 클래스에 객체를 생성한 뒤, 메서드에서 호출하는 방식.
	->메서드가 많을 경우, 일일히 추가/삭제/수정해야 하는 문제점 발생

------------------------------------------------------------------
->pom.xml에 aspectj 추가(aspectjrt, aspectjweaver)
->applicationContext.xml>Namespaces - aop 체크 

(*AOP : xml 방식)
1. applicationContext.xml 에서 빈을 등록하고, aop의 적용범위 및 적용시점을 지정함
   a) 빈 등록 : advice 클래스
	<bean id="log" class="com.springbook.biz.common.Log4jAdvice"></bean>
   b) <aop:config>...</aop:config> 안에, <aop:pointcut>과 <aop:aspect> 삽입 
   c) <aop:pointcut id="allPointCut" expression="execution(* com.springbook.biz..*Impl.*(..))" />
	- 모든 join point 중에서 point cut 지정(Impl로 끝나는 모든 클래스)
   d) <aop:aspect ref="log">...</aop:aspect>	
	- 위에서 지정한 bean의 id 입력
   e)  <aop:around pointcut-ref="allPointCut" method="aroundLog"/>
	- pointcut의 id와 동작시킬 메서드 지정(ref에 대응되는 클래스에 정의되어 있어야 함)

(*AOP : annotation 방식)
1. applicationContext.xml에서 객체를 생성하지 않음. 
   log 클래스를 @Service로 등록

2. applicationContext.xml 또는 root-context.xml에 <aop:aspectj-autoproxy></aop:aspectj-autoproxy> 입력
   <context:component-scan base-package="org.zerock.aop"></context:component-scan>
	- base-package 등록하기

3. LogAdvice 파일에서 annotation을 사용
   - @Service, @Aspect로 등록
   - @Pointcut("point cut 적용 위치 적용")	//괄호 안에 execution 잊지말기
      pointCut 메서드 생성(빈 메서드)
   - @Before/@After/@Around("@Pointcut 을 사용한 빈 메서드")	//메서드명 뒤에 괄호 쓰기
     지정한 메서드에서 행할 log 동작 지정.
     매개변수에 JoinPoint를 넣어, 핵심로직의 정보를 볼 수도 있음