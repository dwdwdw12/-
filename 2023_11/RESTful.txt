RESTful(https://meetup.nhncloud.com/posts/92)
1. REST API
   - HTTP 웹의 장점을 최대한 활용할 수 있는 아키텍처.
   - 자원(URI), 행위(Method), 표현으로 구성

2. REST 특징
   a) Uniform Interface
	- URI로 지정한 리소스에 대한 조작을 통일되고 한정적인 인터페이스로 수행
   b) Stateless(무상태성)
	- 작업을 위한 상태정보를 따로 저장하고 관리하지 않음. 세션정보다 쿠키 정보를 별도로 저장하고 관리하지 않기 때문에, API 서버는 들어오는 요청만 처리. 
	- 서비스의 자유도가 높아지고, 구현이 단순해짐
   c) Cacheable(캐시 가능)
	- 웹에서 사용하는 기존 인프라를 그대로 활용가능
	- 캐싱 기능 적용 가능(Last-Modified 또는 E-Tag 활용->개발자 도구 확인해보기)
   d) Self-descriptiveness(자체 표현 구조)
	-REST API 메시지만 보고도 이를 쉽게 이해가능.
   e) Client - Server 구조
	-REST 서버는 API 제공, 클라이언트는 사용자 인증이나 컨텍스트(세션, 로그인 정보)등을 직접 관리하는 구조로 각각의 역할이 확실히 구분
	-클라이언트와 서버에서 개발해야 할 내용이 명확해지고 서로간의 의존성 감소
   f) 계층형 구조
	-REST 서버는 다중 계층으로 구성될 수 있으며 보안, 로드 밸런싱, 암호화 계층을 추가해 구조상의 유연성을 둘 수 있고 PROXY, 게이트웨이 같은 네트워크 기반의 중간매체를 사용 가능

3. REST API 디자인 가이드
   a) URI는 정보의 자원을 표현
   b) 자원에 대한 행위는 HTTP Method(GET, POST, PUT, DELETE)로 표현. + (PATCH)
				(=Read/Create/Update/Delete)
   c) 주의점
	-슬래시 구분자(/)는 계층 관계를 나타내는 데 사용
	-URI 마지막 문자로 슬래시(/)를 포함하지 않는다.
	-하이픈(-)은 URI 가독성을 높이는데 사용
	-밑줄(_)은 URI에 사용하지 않는다.
	-URI 경로에는 소문자가 적합
	-파일 확장자는 URI에 포함시키지 않는다.
   d) URI에서 리소스간의 관계를 표현할 수 있음

4. HTTP 응답 상태 코드
   - 잘 설계된 REST API는 URI만 잘 설계된 것이 아닌 그 리소스에 대한 응답을 잘 내어주는 것까지 포함
   - 200(OK), 500(INTERNAL_SERVER_ERROR) 등등...