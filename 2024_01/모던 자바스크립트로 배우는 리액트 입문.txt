모던 자바스크립트로 배우는 리액트 입문

*가상 DOM : 자바 스크립트 객체로 만들어진 가상의 DOM. 실제 DOM과의 차이를 비교해, 변경된 부분만을 실제 DOM에 반영. DOM 조작을 최소한으로 줄임.
	리액트, vue 등 모던 자바스크립트 프레임워크/라이브러이에서는 가상 DOM을 제공
	-페이지 이동은 자바스크립트의 화면 치환으로 구현. 렌더링 비용 최소화. 쾌적한 웹 시스템.

*SPA 웹 시스템 : 하나의 HTML 파일 안에서, 자바스크립트를 이용해 DOM을 바꿔써서 화면 이동을 구현.

*var : 덮어쓰기, 재선언 가능
let : 덮어쓰기 가능. 재선언 불가능
const : 덮어쓰기, 재선언 불가능(단, 객체, 배열, 함수 등의 오브젝트타입은 내부 값을 바꿀 수는 있음)

*prettier : 코드 형태 정리 규칙 통일. 코드 포매팅 도구
*ESLint : 정적 분석 도구, 코드의 문제점 확인 가능.

*백틱(`) 사용 : 문자열 안에 변수(${...}) 삽입 가능. 함수 호출 가능.

*배열 복사 
-a) 등호(=) 사용 : 참조값을 상속. 복사된 배열이 바뀔 경우, 원본 배열도 같이 바뀜.
-b) 스프레드 구문을 사용 : 완전히 새로운 배열을 생성.

*화살표 함수 : 자바 람다식과 비슷
map : 배열을 순서대로 처리. 두번째 인수에 index 넣어서 출력 가능.
filter : 조건에 일치하는 값만 출력

* || : 둘 중에 true 값 반환(왼쪽부터).
  && : 왼쪽이 true이면 오른쪽 반환

* truthy	: 암묵적으로 true로 판정(if("aaa"){~~~}). 예시) [ ](빈 배열), { }(빈 객체)
  falsy	: 암묵적으로 false로 판정. 예시) 0, ""(빈 문자)
  nullish	: null, undefined로 판정. ?? 연산자(좌항이 null, undefined라면 우항의 값을 반환)

*document.getElementById()
document.querySelector() : 일치하는 첫번째 요소(id(#), class(.))
document.getElemenstByClassName() : HttpCollection 반환
document.querySelectorAll() : NodeList 반환

*DOM 작성
document.createElement() : 괄호 안에는 존재하는 태그를 사용하기. <div></div> 꼴 반환
*DOM 추가 : appendChild()
*DOM 삭제 : removeChild() 또는 textContent = null

ch04)
*리액트 생성
VS Code에서 폴더 열기
ctrl+j 로 터미널 접근
npx create-react-app [프로젝트명]
cd 프로젝트명
npm start
		//에러나면 폴더가 생성되어 있는지 확인

*Props, State
Props : 텀포넌트에 전달하는 인수. 컴포넌트는 전달받은 Props에 따라 표시되는 스타일과 내용 변경
Props를 destructure : 분할대입
State : 컴포넌트의 상태를 나타냄(에러여부, 버튼 클릭 여부 등등)

*재렌더링
변경을 감지하고 컴포넌트를 다시 처리
-리액트 훅
useState : State 변수와 State를 업데이트하기 위한 함수를 설정.
useEffect : 부작용. 어떤 값이 변했을 때에 한해서만 어떤 처리를 실행

*export 종류
normal export
default export : {...} 없이 import 가능

ch05)
*인라인 스타일
CSS 모듈
-터미널에서 npm install -s node-sass		//-s가 없으면 error. 실행시 에러나면 재설치하기(npm install sass).
-styled jsx
-Next.js : 리액트 기반 프레임워크. 성능이 뛰어남

*리액트 css 라이브러리
-styled components : 스타일을 적용한 컴포넌트를 정의할 수 있음
npm install styled-components
-Emotion : 다양한 사용방법을 제공. 선호하는 작성 방식을 이용할 수 있지만, 유지보수성이 낮아질 수도 있음
npm install @emotion/react @emotion/styled
-Tailwind CSS : 유틸리티 우선(utility first) 프레임워크. flex, text-center와 같이 className에 설정할 수 있는 클래스명의 부품만 제공. 이것을 조합해 사용 가능
npm install -D tailwindcss@npm:@tailwindcss/postcss7-compat postcss@^7 autoprefixer@^9
npm install @craco/craco

npx tailwindcss init
npm install -D tailwindcss

@tailwind 에러 -> PostCSS Language Support 설치하기
*tailwind 적용 안됨...

ch06)
*재렌더링 발생 패턴
-State가 업데이트된 컴포넌트
-Props가 변경된 컴포넌트
-재렌더링된 컴포넌트 아래의 모든 컴포넌트
*메모이제이션(memoization)
-리액트에서 컴포넌트, 변수, 함수 등을 재렌더링할 때 제어가 필요한 경우 수행.
-이전 처리결과를 저장해 둠으로써 처리 속도를 높이는 기술.
-필요할 때만 다시 계산하여 불필요한 처리를 줄임
-함수 메모이제이션 : 함수를 props로 받으면 하위 항목(child)는 props가 변화했다고 판정. 계속 재렌더링 -> useCallback(함수, 의존배열)으로 함수 메모이제이션 하기.
-변수 메모이제이션 : 변수 정의 로직이 복잡하거나, 루프가 많을 때. useMemo(함수의 변수에 설정할 값을 반환, 의존배열)

ch07)
*버킷 릴레이
-컴포넌트가 여러 계층으로 구성되어 있을 때, 맨 아래 계층의 컴포넌트에서 사용하고자 할 때, 불필요하게 props를 전달하는 것
-코드가 복잡해짐 : 한 개의 컴포넌트가 가진 props가 비대해짐.
-본래 필요하지 않은 props를 전달 -> 다른 위치에서 재사용할 수 없는 컴포넌트가 됨
-컴포넌트는 props가 변경되면 재렌더링됨 -> 본래 재렌더링될 필요가 없는 컴포넌트도 state가 변경되면 모두 재렌더링됨.

*글로벌 State 관리
-Context 기능을 사용해 구현 가능.
-a)React.createContext로 Context의 프로바이더 작성
-b)작성한 Context의 Provider로 글로번 State를 다루고자하는 컴포넌트를 감싼다
-c)State를 참조할 컴포넌트에서 React.useContext를 사용함.

*글로벌 State 사용 여부 판단
-애플리케이션의 여러 위치에서 참조하는 값이 있거나, 계층 구조에 없는 컴포넌트 사이에서 값을 공유하는 경우가 많을 때
-예시)로그인한 사용자 정보

*재렌더링 주의
-Context 객체 하나의 값이 변경됐을 경우, useContext로 Context를 참조하고 있는 컴포넌트는 모두 재렌더링됨.
-하나의 Context에 속성이 다른 다양한 State를 함께 두는 것을 피해야 함.
-또는 업데이트 함수를 별도의 Context로 나눌 수도 있음.

*기타 글로벌 State 취급
-라이브러리 : Redux, Recoil 등...